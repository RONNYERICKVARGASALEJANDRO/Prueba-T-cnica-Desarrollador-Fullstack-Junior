generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks Task[] @relation("CreatedTasks")
  comments  Comment[]
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  assignedTo  User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId Int?
  createdBy   User     @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById Int
  comments    Comment[]
  attachments Attachment[]
  notifications Notification[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
}

model Attachment {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}